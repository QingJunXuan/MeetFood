package com.meetfood.controller;

import com.meetfood.entity.User;
import com.meetfood.repository.UserRepository;
import com.meetfood.statusCode.JsonResult;
import com.meetfood.statusCode.StatusCode;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after user.Application path)
@Api(value="UserController|用于用户登录注册的controller")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    //注册
    @ResponseBody
    @PostMapping(path="/register") // Map ONLY POST Requests
    @ApiOperation(value="输入信息（邮箱/密码/名字/类别）进行注册",notes="返回json/String")
    @ApiImplicitParams({
            @ApiImplicitParam( paramType ="query",name="email",value="注册邮箱",required=true,dataType="String"),
            @ApiImplicitParam( paramType ="query",name="password",value="注册密码",required=true,dataType="String"),
            @ApiImplicitParam( paramType ="query",name="type",value="账号类型",required=true,dataType="Integer"),
            @ApiImplicitParam( paramType ="query",name="name",value="用户名称",required=true,dataType="String")
    })
    public JsonResult register (@RequestParam String email
            , @RequestParam String password
            , @RequestParam Integer type
            , @RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        boolean emailCheck = false;

        // 判断邮箱格式是否正确：合法的邮箱名中至少要包含"@", 并且"@"是在"."之前
        // 获取邮箱中"@"符号的位置
        int index1 = email.indexOf("@");
        // 获取邮箱中"."号的位置
        int index2 = email.indexOf('.');
        // 判断必须包含"@"符号，且"@"必须在"."之前
        if (index1 != -1 && index2 > index1) {
            emailCheck = true;
        } else {
            emailCheck = false;
        }
        //查询邮箱
        if (emailCheck != false) {
            if (userRepository.findByEmail(email).size() == 0) {
                User n = new User();
                //新建用户
                n.setEmail(email);
                n.setPhoto("10000");
                n.setName(name);
                n.setPassword(password);
                n.setType(type);
                userRepository.save(n);
                return  new JsonResult(StatusCode.SUCCESS.getCode(),StatusCode.SUCCESS.getMessage(), new Date());
            } else return  new JsonResult(StatusCode.FAIL_REGISTERED.getCode(),StatusCode.FAIL_REGISTERED.getMessage(), new Date());
        }else return  new JsonResult(StatusCode.FAIL_FORMAT.getCode(),StatusCode.FAIL_FORMAT.getMessage(), new Date());
    }

    //登录
    @ResponseBody
    @PostMapping(path="/login") // Map ONLY POST Requests
    @ApiOperation(value="使用邮箱密码进行登录",notes="返回json/String")
    @ApiImplicitParams({
            @ApiImplicitParam( paramType ="query",name="email",value="登录邮箱",required=true,dataType="String"),
            @ApiImplicitParam( paramType ="query",name="password",value="登陆密码",required=true,dataType="String")
    })
    public  JsonResult register (@RequestParam String email
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if(userRepository.findByEmail(email).size()!= 0){
            if(userRepository.findByEmailAndPassword(email,password).size()!= 0){
                return new JsonResult(StatusCode.SUCCESS.getCode(), StatusCode.SUCCESS.getMessage(), new Date());
            }else return new JsonResult(StatusCode.FAIL_PASS.getCode(),StatusCode.FAIL_PASS.getMessage(), new Date());
        }else return new JsonResult(StatusCode.FAIL_UNREGISTER.getCode(),StatusCode.FAIL_UNREGISTER.getMessage(), new Date());
    }
    //查看所有用户
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
