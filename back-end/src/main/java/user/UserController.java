package user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import user.JsonResult;
import user.StatusCode;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after user.Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

    //注册
    @PostMapping(path="/register") // Map ONLY GET Requests
    public @ResponseBody JsonResult register (@RequestParam String email
            , @RequestParam String password
            ,@RequestParam Integer type
            ,@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        boolean emailCheck = false;

        // 判断邮箱格式是否正确：合法的邮箱名中至少要包含"@", 并且"@"是在"."之前
        // 获取邮箱中"@"符号的位置
        int index1 = email.indexOf("@");
        // 获取邮箱中"."号的位置
        int index2 = email.indexOf('.');
        // 判断必须包含"@"符号，且"@"必须在"."之前
        if (index1 != -1 && index2 > index1) {
            emailCheck = true;
        } else {
            emailCheck = false;
        }
        //查询邮箱
        if (emailCheck != false) {
            if (userRepository.findByEmail(email).size() == 0) {
                User n = new User();
                //新建用户
                n.setEmail(email);
                n.setPhoto("10000");
                n.setName(name);
                n.setPassword(password);
                n.setType(type);
                userRepository.save(n);
                return  new JsonResult(StatusCode.SUCCESS.getCode(),StatusCode.SUCCESS.getMessage(), new Date());
            } else return  new JsonResult(StatusCode.FAIL_REGISTERED.getCode(),StatusCode.FAIL_REGISTERED.getMessage(), new Date());
        }else return  new JsonResult(StatusCode.FAIL_FORMAT.getCode(),StatusCode.FAIL_FORMAT.getMessage(), new Date());
    }

    //登录
    @PostMapping(path="/login") // Map ONLY GET Requests
    public @ResponseBody JsonResult register (@RequestParam String email
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if(userRepository.findByEmail(email).size()!= 0){
            if(userRepository.findByEmailAndPassword(email,password).size()!= 0){
                return new JsonResult(StatusCode.SUCCESS.getCode(), StatusCode.SUCCESS.getMessage(), new Date());
            }else return new JsonResult(StatusCode.FAIL_PASS.getCode(),StatusCode.FAIL_PASS.getMessage(), new Date());
        }else return new JsonResult(StatusCode.FAIL_UNREGISTER.getCode(),StatusCode.FAIL_UNREGISTER.getMessage(), new Date());
    }
    //查看所有用户
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
	}
}
